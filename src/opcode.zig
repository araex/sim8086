const std = @import("std");

pub const Mnemonic = enum {
    Unknown,
    // move
    mov_rm_to_from_r,
    mov_imm_to_rm,
    mov_imm_to_r,
    mov_mem_to_accumulator,
    mov_accumulator_to_mem,
    // add
    // add_rm_with_r_to_either,
    // add_imm_to_rm,
    // add_imm_to_acc,
    // sub
    // cmp
    // jumps
};

// http://ref.x86asm.net/coder32.html#xB8
const opcode_table = [256]Mnemonic{
    // 0x00
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x0F
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x1F
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x2F
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x3F
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x4F
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x5F
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x6F
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x7F
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .mov_rm_to_from_r,
    .mov_rm_to_from_r,
    .mov_rm_to_from_r,
    .mov_rm_to_from_r,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x8F
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0x9F
    .mov_mem_to_accumulator,
    .mov_mem_to_accumulator,
    .mov_accumulator_to_mem,
    .mov_accumulator_to_mem,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0xAF
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    .mov_imm_to_r,
    // 0xBF
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .mov_imm_to_rm,
    .mov_imm_to_rm,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0xCF
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0xDF
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    // 0xEF
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
    .Unknown,
};

pub fn decode(byte: u8) Mnemonic {
    return opcode_table[byte];
}

test "decode" {
    const TestCase = struct {
        in: u8,
        expected: Mnemonic,
    };
    const test_cases = [_]TestCase{
        .{ .in = 0b10011000, .expected = .Unknown },
        .{ .in = 0b10001100, .expected = .Unknown },
        .{ .in = 0b10001000, .expected = .mov_rm_to_from_r },
        .{ .in = 0b10001010, .expected = .mov_rm_to_from_r },
        .{ .in = 0b10001011, .expected = .mov_rm_to_from_r },
        .{ .in = 0b10110000, .expected = .mov_imm_to_r },
        .{ .in = 0b10111011, .expected = .mov_imm_to_r },
        .{ .in = 0b11000110, .expected = .mov_imm_to_rm },
        .{ .in = 0b11000111, .expected = .mov_imm_to_rm },
        .{ .in = 0b10100000, .expected = .mov_mem_to_accumulator },
        .{ .in = 0b10100001, .expected = .mov_mem_to_accumulator },
        .{ .in = 0b10100010, .expected = .mov_accumulator_to_mem },
        .{ .in = 0b10100011, .expected = .mov_accumulator_to_mem },
    };

    for (test_cases) |case| {
        const actual = decode(case.in);
        if (actual != case.expected) {
            std.debug.print("0b{b}: want: {}, got: {}\n", .{ case.in, case.expected, actual });
            return error.TestExpectedEqual;
        }
    }
}
